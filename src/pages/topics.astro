---
import type { MarkdownInstance } from 'astro'
import { format } from 'date-fns'

import BaseHead from '$/components/BaseHead.astro'
import Heroes from '$/components/Heroes.astro'
import PageFooter from '$/components/PageFooter.astro'
import PageHeader from '$/components/PageHeader.astro'
import { getTopics } from '$/lib/topics'
import type { BlogPost } from '$/types/blogPost'

const allPosts = Object.values<MarkdownInstance<BlogPost>>(
	import.meta.glob('./topics/*/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]_*.md', {
		eager: true,
	})
)

allPosts.sort(
	(a, b) =>
		+new Date(b.frontmatter.lastUpdateDate || b.frontmatter.publishDate) -
		+new Date(a.frontmatter.lastUpdateDate || a.frontmatter.publishDate)
)

const topics = getTopics((_topic, pathname) =>
	allPosts.filter(({ url = '' }) => url.slice(0, pathname.length) === pathname)
)
---

<html lang="en">
	<head>
		<BaseHead title="Merri.net topics" description="The most recent posts on each topic covered by this site." />
	</head>

	<body>
		<PageHeader />
		<main id="main">
			<Heroes title="Topics">
				{
					topics.map((topic, index) => {
						const hasNone = topic.posts.length === 0
						const hasMore = topic.posts.length > 3
						const posts = hasMore ? topic.posts.slice(0, 2) : topic.posts
						return (
							<>
								{index > 0 && <hr />}
								<h2>{topic.title}</h2>
								<p>
									{topic.description}
									{hasMore && (
										<small>
											<br />
											There{' '}
											{topic.posts.length > 1
												? `are ${topic.posts.length} posts`
												: 'is one post'}{' '}
											about this topic.
										</small>
									)}
								</p>
								{hasNone ? (
									<p class="ff9-dialog empty">Oh no! There are no posts about this topic.</p>
								) : null}
								<ol role="list">
									{posts.map((content) => {
										const url = content.url?.replace(/\/index$/, '')
										const date = new Date(content.frontmatter.publishDate)
										const updateDate =
											content.frontmatter.lastUpdateDate &&
											new Date(content.frontmatter.lastUpdateDate)
										const published = format(date, 'PPP')
										const ymd = format(date, 'yyyy-MM-dd')

										return (
											<li>
												<a href={url}>
													<div class="ff9-dialog">
														<h2>{content.frontmatter.title}</h2>
														<small>
															<time datetime={ymd}>{published}</time>
															{updateDate && (
																<>
																	{' '}
																	(updated on{' '}
																	<time datetime={format(updateDate, 'yyyy-MM-dd')}>
																		{format(updateDate, 'PPP')}
																	</time>
																	)
																</>
															)}
														</small>
														{content.frontmatter.description}
													</div>
												</a>
											</li>
										)
									})}
								</ol>
								{hasMore && (
									<a href={`/topics/${topic.slug}`}>
										<p>Show all posts on this topic</p>
									</a>
								)}
							</>
						)
					})
				}
			</Heroes>
			<style>
				@import './_topics.css';

				.empty {
					display: flex;
					filter: sepia(0.5);
					margin: 2rem auto 0;
					width: max-content;
					max-width: 100%;
				}
			</style>
		</main>
		<PageFooter />
	</body>
</html>
